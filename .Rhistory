dt = dt1[, c(2,4)]
SORR_to_coverage = function(path_equity,path_FI,a,start_point=0,end_point=0,e,x,n,m) {
#first glidepath, constant
glidepath_one = matrix(0,nrow = n, ncol = 2)
glidepath_one[,1] = a
glidepath_one[,2] = 1-a
#second glidepath
glidepath_two = matrix(0,nrow = n, ncol = 2)
rate = (end_point - start_point)/n  #changing rate
glidepath_two[,1] = seq(from = start_point, to = end_point-rate, by = rate)
glidepath_two[,2] = 1-glidepath_two[,1]
init = e*x/12
withdraw[1] = init
for (i in 2:nrow(dt)) {
withdraw[i] = withdraw[i-1] * (1+dt1$inflation[i])
}
wealth = matrix(0,nrow = n, ncol = m)
wealth[1,] = e
#calculate wealth position at specific time point after withdraw
for (j in 1:m) {
for (i in 2:n) {
wealth[i,j] = (wealth[i-1,j] * ((1+path_equity[i,j])*glidepath_one[i,1] + (1+path_FI[i,j])*glidepath_one[i,2])) - withdraw[i]   #change glide path to 2
}
}
# calculate coverage ratio for every path
# if wealth at 30 year is still positive, coverage ratio > 1
cover = matrix(0, nrow = 1, ncol = m)
for (i in 1:m) {
if (wealth[nrow(wealth),i]<0) {
cover[i] = sum(wealth[,i]>0)/n
}
else {
cover[i] = (n+(wealth[nrow(wealth),i]/init))/n
}
}
cover_ratio = mean(cover)
return(cover_ratio)
}
SORR_to_coverage_dist = function(path_equity,path_FI,a,start_point=0,end_point=0,e,x,n,m) {
#first glidepath, constant
glidepath_one = matrix(0,nrow = n, ncol = 2)
glidepath_one[,1] = a
glidepath_one[,2] = 1-a
#second glidepath
glidepath_two = matrix(0,nrow = n, ncol = 2)
rate = (end_point - start_point)/n  #changing rate
glidepath_two[,1] = seq(from = start_point, to = end_point-rate, by = rate)
glidepath_two[,2] = 1-glidepath_two[,1]
init = e*x/12
withdraw[1] = init
for (i in 2:nrow(dt)) {
withdraw[i] = withdraw[i-1] * (1+dt1$inflation[i])
}
wealth = matrix(0,nrow = n, ncol = m)
wealth[1,] = e
#calculate wealth position at specific time point after withdraw
for (j in 1:m) {
for (i in 2:n) {
wealth[i,j] = (wealth[i-1,j] * ((1+path_equity[i,j])*glidepath_one[i,1] + (1+path_FI[i,j])*glidepath_one[i,2])) - withdraw[i]   #change glide path to 2
}
}
# calculate coverage ratio for every path
# if wealth at 30 year is still positive, coverage ratio > 1
cover = matrix(0, nrow = 1, ncol = m)
for (i in 1:m) {
if (wealth[nrow(wealth),i]<0) {
cover[i] = sum(wealth[,i]>0)/n
}
else {
cover[i] = (n+(wealth[nrow(wealth),i]/init))/n
}
}
#cover_ratio = mean(cover)
return(cover)
}
dt = dt1[, c(2,4)]
#read data
# first column date
# second column equity return
# fourth column fixed income return
filepath_viktor =
filepath_haocheng = "Desktop/MIT/Fall2018/Proseminar/data/clean data/data.xlsx"
#read data
# first column date
# second column equity return
# fourth column fixed income return
filepath_viktor = '/Users/hermannviktor/Python/PycharmProjects/15.451-Proseminar-IM/Excel/data.xlsx'
dt1 <- read_excel(filepath_viktor)
#read data
# first column date
# second column equity return
# fourth column fixed income return
library(readxl)
dt1 <- read_excel(filepath_viktor)
dt1$Dates = as.Date(dt1$Dates,"%Y-%m-%d")
View(dt1)
dt1 <- read_excel(filepath_viktor)
View(dt1)
dt1$Dates = as.Date(dt1$Dates,"%Y-%m-%d")
######################################
gene_path <- Simulated_Path_Given_SORR(0.7,100000)
dt = dt1[, c(2,4)]
dt = na.omit(dt)
base = dt[order(dt$equity),]
n = nrow(base) # 342 period
equity_return = base$equity
FI_return = base$FI
size_bad_return = floor(0.3*n)
size_ok_return = n-size_bad_return
Simulated_Path_Given_SORR =
function(sorr,m){
index_bad = 1:floor(0.3*n) #102 periods
index_ok = (floor(0.3*n)+1):n
rand_index = matrix(0, nrow = n, ncol = m)
path_equity = matrix(0, nrow = n, ncol = m)
path_FI = matrix(0, nrow = n, ncol = m)
for(i in 1:m){
left_bad = sample(index_bad, size = floor(sorr*size_bad_return))
right_bad = setdiff(index_bad, left_bad)
left_ok = sample(index_ok, size = (1/2*n - floor(sorr*size_bad_return)))
right_ok = setdiff(index_ok, left_ok)
left = c(left_bad, left_ok)
right = c(right_bad, right_ok)
#rand_index[1:(1/2*size_bad_return),i] = left_bad
#rand_index[(1/2*n+1):(1/2*n+sorr*size_bad_return),i] = right_bad
#rand_index[(1/2*size_bad_return+1):(1/2*n),i] = left_ok
#rand_index[(1/2*n+1/2*size_bad_return+1):n,i] = right_ok
rand_index[(1:(1/2*n)),i] <- sample(left, size = length(left))
rand_index[((1/2*n+1):n),i] <- sample(right, size = length(right))
}
for (i in 1:m) {
for (j in 1:n) {
path_equity[j,i] = equity_return[rand_index[j,i]]
path_FI[j,i] = FI_return[rand_index[j,i]]
}
}
return(list(path_equity,path_FI))
}
gene_path <- Simulated_Path_Given_SORR(0.5,100)
path_equity <- gene_path[[1]]
path_FI <- gene_path[[2]]
path_equity <- gene_path[[1]]
path_FI <- gene_path[[2]]
######################################
gene_path <- Simulated_Path_Given_SORR(0.7,100000)
#test on different allocation
results = matrix(0,nrow=1,ncol=100)
for (i in 1:100) {
a = i/100
results[i] = SORR_to_coverage(path_equity,path_FI,a,0.2,0.5,100000,0.04,342,100)
}
hist(results)
plot(results[1,],type='l')
#plot coverage ratio histogram for given SORR and glidepath
results_hist = SORR_to_coverage_dist(path_equity = path_equity,path_FI = path_FI, a=0.6,e=100000,x=0.04,n=342,m=10000)
hist(results_hist, breaks = 12, xlab = 'Coverage Ratio', main = 'SORR=0.7 / Equity proportion = 0.6')
